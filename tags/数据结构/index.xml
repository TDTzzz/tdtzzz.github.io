<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>数据结构 on Even - A super concise theme for Hugo</title>
    <link>http://localhost:1313/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
    <description>Recent content in 数据结构 on Even - A super concise theme for Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 19 Dec 2020 23:40:49 +0800</lastBuildDate><atom:link href="http://localhost:1313/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>前缀树</title>
      <link>http://localhost:1313/post/trie-tree/</link>
      <pubDate>Sat, 19 Dec 2020 23:40:49 +0800</pubDate>
      
      <guid>http://localhost:1313/post/trie-tree/</guid>
      <description>看动画轻松理解「Trie树」 埋坑：目前只是了解原理及用法，代码实现以后补上 定义 Trie 树，也叫“字典树”。顾名思义，它是一个树形结构。它是一种专门</description>
    </item>
    
    <item>
      <title>红黑树</title>
      <link>http://localhost:1313/post/red-black-tree/</link>
      <pubDate>Sat, 19 Dec 2020 10:27:14 +0800</pubDate>
      
      <guid>http://localhost:1313/post/red-black-tree/</guid>
      <description>此文只浅显的讲了下概念，至于复杂的代码实现没涉及，后续有时间搞 用go实现红黑树的相关操作 红黑树 好文章 什么是红黑树 当在10亿数据进行不到30次</description>
    </item>
    
  </channel>
</rss>
